{"version":3,"sources":["util/helpers.js","util/colors.js","components/KeyFigure.js","components/MapLegend.js","components/MapContainer.js","components/LineBarChart.js","components/PieChart.js","screens/Main.js","theme/globalStyle.js","App.js","serviceWorker.js","index.js"],"names":["hxlProxyToJSON","input","output","keys","forEach","e","i","e2","i2","parts","split","key","length","atts","splice","sort","att","push","row","fetchJSON","file","fetch","then","response","json","formatValue","d3","formatCommaValue","colors","Value","styled","h2","_templateObject","StyledP","p","_templateObject2","KeyFigure","this","props","value","react_default","a","createElement","style","label","source","Component","Legend","div","MapLegend_templateObject","Title","h5","MapLegend_templateObject2","ScaleContainer","_templateObject3","Scale","_templateObject4","LinearGradient","_templateObject5","MapLegend","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","colorLegend","svgLegend","append","attr","selectAll","data","enter","d","text","className","Container","MapContainer_templateObject","pinScale","scaleLinear","domain","range","orgScale","MapContainer","_this","state","currentRegion","setTimeout","ReactTooltip","rebuild","geography","handleRegionSelect","properties","admin1Name","marker","region","name","_this2","lib","projectionConfig","scale","width","height","overflow","zoom","center","geoData","geographies","projection","map","index","concat","data-tip","default","fill","pin","stroke","strokeWidth","outline","hover","pressed","onClick","handleMapClick","bind","regionData","handleMarkerClick","cx","cy","r","orgs","components_MapLegend","position","bottom","right","dist_default","LineBarChart","sectorData","datasets","yAxisID","type","lineTitle","lineData","lineTension","borderWidth","pointRadius","borderColor","lineColor","backgroundColor","pointBorderColor","pointBackgroundColor","pointHoverBackgroundColor","pointHoverBorderColor","barTitle","barData","barColor","hoverBackgroundColor","hoverBorderColor","sectorOptions","responsive","tooltips","mode","callbacks","tooltipItem","datasetIndex","yLabel","legend","display","labels","boxWidth","elements","line","scales","xAxes","gridLines","ticks","autoSkip","yAxes","id","min","maxTicksLimit","callback","values","es","options","PieChart","filter","dataset","total","_meta","currentValue","percentage","parseFloat","toFixed","title","Main_templateObject","h1","Main_templateObject2","KeyFiguresContainer","Main_templateObject3","VisualizationContainer","Main_templateObject4","DetailContainer","Main_templateObject5","CurrentStats","_templateObject6","Main","dataReady","mergedGeoData","mergedRegionData","keyFigures","currentStats","currentPinSector","currentOrgSector","sectors","pinCF","orgsCF","sectorCF","regionDimension","sectorDimension","orgDimension","Promise","all","API_URL","_ref","_ref2","slicedToArray","pinSector","pinGlobal","_3w","pinSectorData","pinGlobalData","_3wData","crossfilter","dimension","getKeyFigures","combineData","getSectorLabels","setState","regionSelect","group","top","Infinity","sectorArray","sector","_this3","objects","mli","geometries","geom","getValueByDimension","groupAll","reduceCount","filterAll","dim","filteredValue","reduceSum","keyFiguresObj","pinTotal","affectedTotal","popTotal","orgsTotal","size","_this4","currPin","filterExact","val","undefined","Number","currOrgs","currSector","getSectorData","regionName","currStats","pop","getCountByRegion","Main_Container","Main_Title","Fragment","components_KeyFigure","components_MapContainer","margin","components_LineBarChart","components_PieChart","fontSize","href","target","GlobalStyles","createGlobalStyle","globalStyle_templateObject","App","screens_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.69e7899a.chunk.js","sourcesContent":["import * as d3 from 'd3-format';\n\nexport function hxlProxyToJSON(input) {\n  let output = [];\n  let keys = [];\n  input.forEach(function(e,i) {\n    if (i===0) {\n      e.forEach(function(e2,i2) {\n        let parts = e2.split('+');\n        let key = parts[0];\n        if (parts.length>1) {\n          let atts = parts.splice(1,parts.length);\n          atts.sort();\n          atts.forEach(function(att) {\n            key +='+'+att\n          });\n        }\n        keys.push(key);\n      });\n    } \n    else {\n      var row = {};\n      e.forEach(function(e2,i2) {\n        row[keys[i2]] = e2;\n      });\n      output.push(row);\n    }\n  });\n  return output;\n}\n\nexport function fetchJSON(file) {\n  return fetch(file)\n    .then(response => response.json());\n}\n\nexport const formatValue = d3.format('.2s');\nexport const formatCommaValue = d3.format(',');","export const colors = {\n  'color_blue': '#007CE0',\n  'color_coral': '#F2645A',\n  'color_coral_light': '#F1D5D3',\n  'color_gray_light': '#D8D8D8',\n}","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { formatValue } from \"../util/helpers\";\n\nconst Value = styled.h2`\n  font-size: 36px;\n  margin: 0 0 5px;\n`;\n\nconst StyledP = styled.p`\n  margin: 0;\n`;\n\nclass KeyFigure extends Component {\n  static propTypes = {\n    value: PropTypes.number,\n    label: PropTypes.string,\n    source: PropTypes.string,\n  };\n\n  render() {\n    if (this.props.value) {\n      return (\n        <div>\n          { this.props.value && <Value style={this.props.style}>{formatValue(this.props.value)}</Value> }\n          { this.props.label && <StyledP>{this.props.label}</StyledP> }\n          { this.props.source && <StyledP>{this.props.source}</StyledP> }\n        </div>\n      )\n    }\n    else {\n      return null;\n    }\n  }\n}\n\nexport default KeyFigure;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { colors } from '../util/colors';\nimport * as d3 from 'd3';\n\nconst Legend = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Title = styled.h5`\n  margin: 0 0 5px;\n`;\n\nconst ScaleContainer = styled.div`\n  padding-right: 15px;\n`;\n\nconst Scale = styled.div`\n  height: 60px;\n  position: relative;\n  p {\n    font-size: 9px;\n    margin: 0;\n    position: absolute;\n    left: 22px;\n    &.max {\n      top: 0;\n    }\n    &.min {\n      bottom: 0;\n    }\n  }\n  .circles {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n    width: 15px;\n    li {\n      background-color: ${colors.color_blue};\n      border-radius: 50%;\n      height: 15px;\n      width: 15px;\n      margin: 0 auto 5px;\n      &:nth-child(2) {\n        height: 13px;\n        width: 13px;\n      }\n      &:nth-child(3) {\n        height: 9px;\n        width: 9px;\n      }\n      &:nth-child(4) {\n        height: 5px;\n        width: 5px;\n      }\n    }\n  }\n`;\n\nconst LinearGradient = styled.div`\n  background: linear-gradient(to bottom, ${colors.color_coral} 0%, ${colors.color_coral_light} 100%);\n  width: 18px;\n  height: 100%;\n`;\n\nclass MapLegend extends Component {\n  constructor() {\n    super();\n  }\n  \n  componentDidMount() {\n    // time to make a legend here\n    // start by storing all color values in an array\n    let colorLegend = [\"rgb(247,251,255)\", \"rgb(222,235,247)\", \"rgb(198,219,239)\", \"rgb(158,202,225)\", \"rgb(107,174,214)\", \"rgb(66,146,198)\", \"rgb(33,113,181)\", \"rgb(8,81,156)\"];\n\n    // get the svg that just mounted - this is componentDidMount()\n    // so this function gets fired just after render()\n    let svgLegend = d3.select('#legend');\n\n    // now just inject standard D3 code\n    svgLegend.append(\"g\")\n        .attr(\"transform\", \"translate(0, 0)\")\n        .selectAll(\"rect\")\n        .data(colorLegend)\n        .enter()\n        .append(\"rect\")\n        .attr(\"fill\", function(d, i){ return colorLegend[i]; })\n        .attr(\"y\", function(d, i){ return (i*30); })\n        .attr(\"x\", 30)\n        .attr(\"width\", 30)\n        .attr(\"height\", 30);\n\n    // add a title\n    svgLegend.append(\"text\")\n        .attr(\"transform\", \"translate(0, 0)\")\n        .attr(\"font-size\", \"12px\")\n        .attr(\"font-family\", \"HelveticaNeue-Bold, Helvetica, sans-serif\")\n        .attr(\"y\", 20)\n        .text(\"People in Need\");\n\n\n\n    // add numbers as labels\n    // let labelsLegend = [\"0-1\",\"1-3\",\"3-5\",\"5-7\",\"7-10\",\"10-12\",\"12-15\",\">15\"];\n    \n    // svgLegend.append(\"g\")\n    //     .attr(\"transform\", \"translate(0, 0)\")\n    //     .selectAll(\"text\")\n    //     .data(labelsLegend)\n    //     .enter()\n    //     .append(\"text\")\n    //     .attr(\"font-size\", \"10px\")\n    //     .attr(\"font-family\", \"HelveticaNeue-Light, Helvetica, sans-serif\")\n    //     .attr(\"x\", function(d, i){ return (i*30); })\n    //     .attr(\"y\", 60)\n    //     .text(function(d){ return d; })\n  }\n  \n  render() {\n    return (\n      <Legend style={this.props.style}>\n        <ScaleContainer>\n          <Title>People in Need</Title>\n          <Scale>\n            <p className='max'>5M</p>\n            <LinearGradient />\n            <p className='min'>0</p>\n          </Scale>\n        </ScaleContainer>\n        <ScaleContainer>\n          <Title>Active Orgs</Title>\n          <Scale>\n            <p className='max'>200</p>\n            <ul className='circles'>\n              <li></li>\n              <li></li>\n              <li></li>\n              <li></li>\n            </ul>\n            <p className='min'>20</p>\n          </Scale>\n        </ScaleContainer>\n      </Legend>\n    );\n  }\n}\n\nexport default MapLegend;","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport { colors } from '../util/colors';\nimport { ComposableMap, Geographies, Geography, Markers, Marker, ZoomableGroup } from 'react-simple-maps';\nimport ReactTooltip from 'react-tooltip';\nimport { scaleLinear } from 'd3-scale';\nimport MapLegend from './MapLegend';\n\nconst Container = styled.div`\n  padding-left: 20px;\n  position: relative;\n`;\n\nconst pinScale = scaleLinear()\n  .domain([0, 1000000])\n  .range([colors.color_coral_light, colors.color_coral]);\n\nconst orgScale = scaleLinear()\n  .domain([0, 120])\n  .range([3, 20]);\n\n\nclass MapContainer extends Component {\n  static propTypes = {\n    geoData: PropTypes.object,\n    regionData: PropTypes.array,\n    handleRegionSelect: PropTypes.func,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { currentRegion: '' };\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      ReactTooltip.rebuild()\n    }, 100)\n  }\n\n  handleMapClick(geography) {\n    this.props.handleRegionSelect(geography.properties.admin1Name);\n  }\n\n  handleMarkerClick(marker) {\n    let region = marker.name==='Koulikoro'? 'Koulikouro' : marker.name; //fix this\n    this.props.handleRegionSelect(region);\n  }\n\n  render() {\n    return (\n      <Container>\n        <ComposableMap projectionConfig={{ scale: 200 }} width={500} height={500} style={{\n          width: \"100%\",\n          height: \"100%\",\n          overflow: \"hidden\",\n        }}>\n          <ZoomableGroup zoom={10} center={[-3.5, 17.5]}>\n            <Geographies geography={this.props.geoData}>\n              {(geographies, projection) => geographies.map((geography, index) => (\n                <Geography\n                  key={ `geography-${index}` }\n                  data-tip={geography.properties.admin1Name}\n                  geography={ geography }\n                  projection={ projection }\n                  style={{\n                    default: {\n                      fill: pinScale(geography.properties.pin),\n                      stroke: '#999',\n                      strokeWidth: 0.1,\n                      outline: 'none',\n                    },\n                    hover: {\n                      fill: pinScale(geography.properties.pin),\n                      stroke: '#999',\n                      strokeWidth: 0.1,\n                      outline: 'none',\n                    },\n                    pressed: {\n                      fill: pinScale(geography.properties.pin),\n                      stroke: '#999',\n                      strokeWidth: 0.1,\n                      outline: 'none',\n                    }\n                  }}\n                  onClick={this.handleMapClick.bind(this)}\n                  />\n              ))}\n            </Geographies>\n            <Markers>\n              {\n                this.props.regionData.map((region, i) => (\n                  <Marker \n                    key={i} \n                    data-tip={region.name}\n                    marker={region}\n                    onClick={this.handleMarkerClick.bind(this)}>\n                    <circle\n                      cx={0}\n                      cy={0}\n                      r={orgScale(region.orgs)}\n                      fill=\"rgba(0,124,224,0.5)\"\n                      stroke=\"#007CE0\"\n                      strokeWidth=\"2\"\n                    />\n                  </Marker>\n                ))\n              }\n            </Markers>\n          </ZoomableGroup>\n        </ComposableMap>\n        <MapLegend style={{position: 'absolute', bottom: '15px', right: '15px'}}/>\n        <ReactTooltip />\n      </Container>\n    )\n  }\n}\n\nexport default MapContainer;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { formatValue, formatCommaValue } from \"../util/helpers\";\nimport { Bar } from \"react-chartjs-2\";\n\n\nclass LineBarChart extends Component {\n  static propTypes = {\n    lineTitle: PropTypes.string,\n    lineData: PropTypes.array.isRequired,\n    lineColor: PropTypes.string,\n    barTitle: PropTypes.string,\n    barData: PropTypes.array.isRequired,\n    barColor: PropTypes.string,\n    labels: PropTypes.array,\n    height: PropTypes.number,\n    width: PropTypes.number,\n  };\n\n  render() {\n    let sectorData = {\n      datasets: [{\n        yAxisID: 'y-axis-2',\n        type: 'line',\n        label: this.props.lineTitle || 'Line',\n        data: this.props.lineData,\n        fill: false,\n        lineTension: 0,\n        borderWidth: 1,\n        pointRadius: 2,\n        borderColor: this.props.lineColor,\n        backgroundColor: this.props.lineColor,\n        pointBorderColor: this.props.lineColor,\n        pointBackgroundColor: this.props.lineColor,\n        pointHoverBackgroundColor: this.props.lineColor,\n        pointHoverBorderColor: this.props.lineColor,\n      },\n      {\n        yAxisID: 'y-axis-1',\n        type: 'bar',\n        fill: false,\n        label: this.props.barTitle || 'Bar',\n        data: this.props.barData,\n        backgroundColor: this.props.barColor,\n        borderColor: this.props.barColor,\n        hoverBackgroundColor: this.props.barColor,\n        hoverBorderColor: this.props.barColor,\n      }]\n    };\n\n    const sectorOptions = {\n      responsive: true,\n      tooltips: {\n        mode: 'label',\n        callbacks: {\n          label: function(tooltipItem, data) {\n            let label = data.datasets[tooltipItem.datasetIndex].label || '';\n            if (label) {\n              label += ': ';\n            }\n            label += formatCommaValue(tooltipItem.yLabel);\n            return label;\n          }\n        }\n      },\n      legend: {\n        display: true,\n        labels: { boxWidth: 12 }\n      },\n      elements: {\n        line: { fill: false }\n      },\n      scales: {\n        xAxes: [\n          {\n            gridLines: { display: false },\n            ticks: { autoSkip: false },\n            labels: this.props.labels,\n          }\n        ],\n        yAxes: [\n          {\n            id: 'y-axis-1',\n            type: 'linear',\n            position: 'right',\n            gridLines: { display: false },\n            ticks: {\n              min: 0,\n              maxTicksLimit: 5,\n              callback: function(value, index, values) {\n                return formatValue(value);\n              }\n            }\n          },\n          {\n            id: 'y-axis-2',\n            type: 'linear',\n            position: 'left',\n            gridLines: { display: false },\n            ticks: {\n              min: 0,\n              maxTicksLimit: 5,\n              callback: function(value, index, values) {\n                return formatValue(value);\n              }\n            }\n          }\n        ]\n      }\n    };\n\n    return (      \n      <Bar\n        height={this.props.height}\n        width={this.props.width}\n        data={sectorData}\n        options={sectorOptions}\n      />\n    )\n  }\n}\n\nexport default LineBarChart;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Pie } from \"react-chartjs-2\";\n\nclass PieChart extends Component {\n  static propTypes = {\n  };\n\n  render() {\n    let data = {\n      datasets: [{\n        data: this.props.data,\n        backgroundColor: this.props.colors,\n        hoverBackgroundColor: this.props.colors,\n      }],\n      labels: this.props.labels,\n    };\n\n    let options = {\n      responsive: false,\n      tooltips: {\n        filter: function (tooltipItem, data) {\n          if (tooltipItem.index===1)\n            return false;\n          else\n            return true;\n        },\n        callbacks: {\n          label: function(tooltipItem, data) {\n            let dataset = data.datasets[0];\n            let meta = dataset._meta[Object.keys(dataset._meta)[0]];\n            let total = meta.total;\n            let currentValue = dataset.data[0];\n            let percentage = parseFloat((currentValue/total*100).toFixed(0));\n            return data.labels[0] + ': ' + percentage + '%';\n          },\n        }\n      },      \n      title: {\n        display: true,\n        position: 'bottom',\n        text: this.props.title,\n      },\n      legend: {\n        display: false,\n      },\n    }\n    return (      \n      <Pie \n        width={this.props.width}\n        data={data} \n        options={options} \n      />\n    )\n  }\n}\n\nexport default PieChart;\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { hxlProxyToJSON, fetchJSON, formatValue } from \"../util/helpers\";\nimport { colors } from \"../util/colors\";\nimport crossfilter from 'crossfilter';\nimport KeyFigure from '../components/KeyFigure';\nimport MapContainer from '../components/MapContainer';\nimport LineBarChart from '../components/LineBarChart';\nimport PieChart from '../components/PieChart';\n\n//local data\nimport geoData from \"../data/mali-topo.json\";\nimport regionData from \"../data/regions.json\";\n\n//data urls\nconst API_URL        = 'https://proxy.hxlstandard.org/data.json?strip-headers=on&url=https%3A%2F%2Fdocs.google.com%2Fspreadsheets%2Fd%2F1eNrVfniiv62WlpKAyrA6VJJx-plGa__6n0hbVnRdCbA%2Fedit%23gid%';\nconst PIN_SECTOR_URL = API_URL + '3D1866689087&force=on';\nconst PIN_GLOBAL_URL = API_URL + '3D752739684&force=on';\nconst _3W_URL        = API_URL + '3D803716133';\n\nconst Container = styled.div`\n  margin: 0 auto;\n  max-width: 1000px;\n`;\n\nconst Title = styled.h1`\n  font-size: 16px;\n  margin: 0;\n`;\n\nconst KeyFiguresContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  margin: 30px 30px 0 0;\n  > div {\n    margin-bottom: 30px;\n  }\n  @media only screen and (min-width: 768px) {\n    flex-direction: row;\n  }\n`;\n\nconst VisualizationContainer = styled.div`\n  border: 1px solid #999;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n  @media only screen and (min-width: 1024px) {\n    flex-direction: row;\n  }\n`;\n\nconst DetailContainer = styled.div`\n  border: 0;\n  border-top: 1px solid #999;\n  padding: 20px;\n  .title {\n    padding-bottom: 20px;\n  }\n  .detailInner {\n    display: flex;\n    flex-direction: row;\n    padding-top: 20px;\n  }\n  @media only screen and (min-width: 1024px) {\n    border: 0;\n    border-left: 1px solid #999;\n    flex-direction: row;\n  }\n`;\n\nconst CurrentStats = styled.div`\n  margin-left: 20px;\n  > div {\n    padding-bottom: 13px;\n  }\n`;\n\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      dataReady: false,\n      mergedGeoData: null,\n      mergedRegionData: null,\n      keyFigures: {}, //object of global key figures\n      currentStats: {}, //object of overall stats for current region\n      currentPinSector: [], //array of number of people in need per sector for current region\n      currentOrgSector: [], //array of number of orgs per sector for current region\n      sectors: [], //array of sector names\n    };\n\n    this.pinCF = null;\n    this.orgsCF = null;\n    this.sectorCF = null;\n    this.regionDimension = null;\n    this.sectorDimension = null;\n    this.orgDimension = null;\n  }\n\n  componentDidMount() {\n    Promise.all([fetchJSON(PIN_SECTOR_URL), fetchJSON(PIN_GLOBAL_URL), fetchJSON(_3W_URL)])\n      .then(([pinSector, pinGlobal, _3w]) => {\n        let pinSectorData = hxlProxyToJSON(pinSector);\n        let pinGlobalData = hxlProxyToJSON(pinGlobal);\n        let _3wData = hxlProxyToJSON(_3w);\n\n        this.pinCF = crossfilter(pinGlobalData);\n        this.sectorCF = crossfilter(pinSectorData);\n        this.orgsCF = crossfilter(_3wData);\n        this.regionDimension = this.pinCF.dimension(function(d) { return d['#adm1+name']; });\n        this.sectorDimension = this.sectorCF.dimension(function(d) { return d['#adm1+name']; });\n        this.orgDimension = this.orgsCF.dimension(function(d) { return d['#adm1+name']; });\n        \n        this.getKeyFigures();\n        this.combineData();\n        this.getSectorLabels();\n\n        this.setState({ dataReady: true });\n\n        //initialize map with a starting region\n        this.regionSelect('Mopti');\n      });\n  }\n\n  getSectorLabels() {\n    let sectors = this.sectorCF.dimension(function(d) { return d['#sector']; }).group().top(Infinity);\n    let sectorArray = [];\n    sectors.forEach(function(sector) {\n      sectorArray.push(sector.key);\n    });\n    this.setState({ sectors: sectorArray.sort() });\n  }\n  \n  combineData() {\n    geoData.objects.mli.geometries.map(geom => {\n      //get pin count by region\n      let pin = this.getValueByDimension(this.regionDimension, 'inneed', geom.properties.admin1Name);\n      geom.properties.pin = pin;\n    });\n\n    regionData.map(region => {\n      //get org count by region\n      this.orgDimension.filter(region.name);\n      let orgs = this.orgsCF.groupAll().reduceCount().value();\n      this.orgDimension.filterAll();\n      region.orgs = orgs;\n    });\n\n    this.setState({ \n      mergedGeoData: geoData,\n      mergedRegionData: regionData,\n    });\n  }\n\n  getValueByDimension(dim, value, region) {    \n    dim.filter(region);\n    let filteredValue = this.pinCF.groupAll().reduceSum(function(d) { return d[`#${value}`]; }).value();\n    dim.filterAll();\n    return filteredValue;\n  }\n\n  getCountByRegion(dim, region) {    \n    dim.filter(region);\n    let filteredValue = this.orgsCF.groupAll().reduceCount().value();\n    dim.filterAll();\n    return filteredValue;\n  }\n\n  getKeyFigures() {\n    let keyFiguresObj = {\n      pinTotal:this.pinCF.groupAll().reduceSum(function(d) { return d['#inneed']; }).value(),\n      affectedTotal: this.pinCF.groupAll().reduceSum(function(d) { return d['#affected']; }).value(),\n      popTotal: this.pinCF.groupAll().reduceSum(function(d) { return d['#population+y2018']; }).value(),\n      orgsTotal: this.orgsCF.size(),\n    };\n    this.setState({ keyFigures: keyFiguresObj });\n  }\n\n  getSectorData(region) {\n    let currPin = [];\n    this.sectorDimension.filterExact(region);\n    this.sectorDimension.top(Infinity).map(d => {\n      this.state.sectors.map((sector, index) => {\n        if (d['#sector']===sector) {\n          let val = currPin[index]===undefined? 0 : currPin[index];\n          currPin[index] = val + Number(d['#inneed']);\n        }\n      });\n    });\n    this.sectorDimension.filterAll();\n\n    let currOrgs = [];\n    //fix discrepancy of region name in 3w data\n    region = region==='Koulikouro'? 'Koulikoro' : region;\n    this.orgDimension.filterExact(region);\n    this.orgDimension.top(Infinity).map(d => {\n      this.state.sectors.map((sector, index) => {\n        //fix label differences from 3w data\n        let currSector = d['#sector'];\n        switch(d['#sector']) {\n          case 'Eau, Hygiène et Assainissement':\n              currSector = 'Wash';\n              break;\n          case 'Abris et NFI':\n              currSector = 'Abris';\n              break;\n          case 'Sécurité alimentaire':\n              currSector = 'Securité alimentaire';\n              break;\n          default:\n              currSector = d['#sector'];\n        }\n        if (currSector===sector) {\n          let val = currOrgs[index]===undefined? 0 : currOrgs[index];\n          currOrgs[index] = val + 1;\n        }\n      });\n    });\n    this.orgDimension.filterAll();\n\n    this.setState({ \n      currentPinSector: currPin,\n      currentOrgSector: currOrgs,\n    });\n  }\n\n  regionSelect(region) {\n    this.getSectorData(region);\n    //fix discrepancy of region name in 3w data\n    let regionName = region==='Koulikouro'? 'Koulikoro' : region;\n    let currStats = {\n      region: region,\n      pin: this.getValueByDimension(this.regionDimension, 'inneed', region),\n      pop: this.getValueByDimension(this.regionDimension, 'population+y2018', region),\n      orgs: this.getCountByRegion(this.orgDimension, regionName),\n    };\n    this.setState({ currentStats: currStats });\n  }\n\n  render() {\n    return (\n      <Container>\n        <Title>MALI - 2018 Needs and Response Overview</Title>\n        <p>Lorem ipsum proident dolor labore elit elit non proident occaecat ex nostrud est consequat magna aute sit in sunt veniam sint minim magna et cupidatat tempor exercitation nulla elit nisi aliquip pariatur dolor esse velit eu consequat laborum fugiat id aute aute sed excepteur deserunt dolor aliqua adipisicing id sunt velit aliquip in ex ad dolore dolor aliquip enim nulla fugiat veniam occaecat aliquip occaecat nisi in officia et officia magna ullamco velit minim nostrud occaecat cupidatat adipisicing consequat proident mollit irure consequat dolor esse irure officia ut ut in non sunt et labore aute laboris commodo ullamco.</p>   \n        {\n          this.state.dataReady &&\n          <React.Fragment>\n            <KeyFiguresContainer>\n              <KeyFigure value={this.state.keyFigures.pinTotal} label={'OVERALL PEOPLE IN NEED'} source={'(HNO 2018)'} />\n              <KeyFigure value={this.state.keyFigures.popTotal} label={'TOTAL POPULATION'} source={'(HNO 2018)'} />\n              <KeyFigure value={this.state.keyFigures.orgsTotal} label={'ACTIVE ORGANIZATIONS'} source={'(as of August 2018)'} />\n            </KeyFiguresContainer>\n            <VisualizationContainer>\n              <MapContainer geoData={this.state.mergedGeoData} regionData={this.state.mergedRegionData} handleRegionSelect={this.regionSelect.bind(this)}/> \n              <DetailContainer>\n                <div className='title'>Region: <h4 style={{display: 'inline-block', margin: '0'}}>{this.state.currentStats.region}</h4></div>\n                <LineBarChart\n                  height={260}\n                  width={400}\n                  labels={this.state.sectors}\n                  barColor={colors.color_coral}\n                  barData={this.state.currentPinSector}\n                  barTitle={'People in Need per Sector'}\n                  lineColor={colors.color_blue}\n                  lineData={this.state.currentOrgSector}\n                  lineTitle={'Active Orgs per Sector'}\n                />\n                <div className='detailInner'>\n                  <PieChart\n                    width={200}\n                    colors={[colors.color_coral, colors.color_gray_light]}\n                    data={[this.state.currentStats.pin, this.state.currentStats.pop-this.state.currentStats.pin]}\n                    labels={['People in need', '']}\n                    title={'% of population in need'}\n                  />\n                  <CurrentStats>\n                    <KeyFigure\n                      className='stat'\n                      value={this.state.currentStats.pin} \n                      label={'People in Need'} \n                      style={{fontSize: '20px', margin: '0'}} />\n                    <KeyFigure \n                      className='stat'\n                      value={this.state.currentStats.pop} \n                      label={'Total Population'} \n                      style={{fontSize: '20px', margin: '0'}} />\n                    <KeyFigure \n                      className='stat'\n                      value={this.state.currentStats.orgs} \n                      label={'Active Organizations'} \n                      style={{fontSize: '20px', margin: '0'}} />\n                  </CurrentStats>\n                </div>\n              </DetailContainer>\n            </VisualizationContainer>\n            <a href=\"https://data.humdata.org/dataset/mali-humanitarian-needs-overview\" target=\"_blank\">HNO Data</a><br/>\n            <a href=\"https://data.humdata.org/dataset/mali-3wop\" target=\"_blank\">3W Data</a>\n          </React.Fragment>\n        }\n      </Container>\n    );\n  }\n}\n\nexport default Main;\n","import { createGlobalStyle } from 'styled-components';\nimport { colors } from '../util/colors';\n\nexport const GlobalStyles = createGlobalStyle`\n\t@font-face {\n\t\tfont-family: 'GothamBold';\n\t\tsrc: url('../assets/fonts/gothambold/gothambold.ttf');\n\t}\n  body {\n    @import url('https://fonts.googleapis.com/css?family=Source+Sans+Pro');\n    font-family: 'Source Sans Pro', sans-serif;\n    font-size: 14px;\n    padding: 30px;\n  }\n  h1,\n  h2,\n  h3,\n  h4 {\n\t\tfont-family: 'Source Sans Pro', sans-serif;\n  }\n\n  p {\n  \tfont-family: 'Source Sans Pro', sans-serif;\n  }\n\n  a {\n  \tcolor: ${colors.color_blue};\n  \t&:hover {\n  \t\tcolor: ${colors.color_coral};\n  \t}\n  }\n`","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './screens/Main';\nimport { GlobalStyles } from './theme/globalStyle';\n\nclass App extends Component {\n  render() {\n    return (\n    \t<React.Fragment>\n    \t\t<GlobalStyles />\n      \t<Main/>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}